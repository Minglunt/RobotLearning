// Generated by gencpp from file grasp_clustering/GraspInfo.msg
// DO NOT EDIT!


#ifndef GRASP_CLUSTERING_MESSAGE_GRASPINFO_H
#define GRASP_CLUSTERING_MESSAGE_GRASPINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace grasp_clustering
{
template <class ContainerAllocator>
struct GraspInfo_
{
  typedef GraspInfo_<ContainerAllocator> Type;

  GraspInfo_()
    : label(0)
    , emg()
    , glove()  {
    }
  GraspInfo_(const ContainerAllocator& _alloc)
    : label(0)
    , emg(_alloc)
    , glove(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _label_type;
  _label_type label;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _emg_type;
  _emg_type emg;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _glove_type;
  _glove_type glove;





  typedef boost::shared_ptr< ::grasp_clustering::GraspInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grasp_clustering::GraspInfo_<ContainerAllocator> const> ConstPtr;

}; // struct GraspInfo_

typedef ::grasp_clustering::GraspInfo_<std::allocator<void> > GraspInfo;

typedef boost::shared_ptr< ::grasp_clustering::GraspInfo > GraspInfoPtr;
typedef boost::shared_ptr< ::grasp_clustering::GraspInfo const> GraspInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grasp_clustering::GraspInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grasp_clustering::GraspInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace grasp_clustering

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'grasp_clustering': ['/home/minglun/project0_ws/src/project0/grasp_clustering/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::grasp_clustering::GraspInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_clustering::GraspInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_clustering::GraspInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_clustering::GraspInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_clustering::GraspInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_clustering::GraspInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grasp_clustering::GraspInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83a64d3b70046df4ff006242975c6777";
  }

  static const char* value(const ::grasp_clustering::GraspInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83a64d3b70046df4ULL;
  static const uint64_t static_value2 = 0xff006242975c6777ULL;
};

template<class ContainerAllocator>
struct DataType< ::grasp_clustering::GraspInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grasp_clustering/GraspInfo";
  }

  static const char* value(const ::grasp_clustering::GraspInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grasp_clustering::GraspInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 label\n\
float32[] emg\n\
float32[] glove\n\
";
  }

  static const char* value(const ::grasp_clustering::GraspInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grasp_clustering::GraspInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.emg);
      stream.next(m.glove);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraspInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grasp_clustering::GraspInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grasp_clustering::GraspInfo_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<int32_t>::stream(s, indent + "  ", v.label);
    s << indent << "emg[]" << std::endl;
    for (size_t i = 0; i < v.emg.size(); ++i)
    {
      s << indent << "  emg[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.emg[i]);
    }
    s << indent << "glove[]" << std::endl;
    for (size_t i = 0; i < v.glove.size(); ++i)
    {
      s << indent << "  glove[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.glove[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASP_CLUSTERING_MESSAGE_GRASPINFO_H
